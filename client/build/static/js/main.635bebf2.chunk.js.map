{"version":3,"sources":["logo.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","loggedIn","signup","axios","post","email","password","then","res","console","log","data","requestData","get","localStorage","getItem","login","token","setItem","_this","setState","this","react_default","a","createElement","className","src","logo","alt","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qRCoEzBC,6MA9DbC,MAAQ,CACNC,UAAU,KAiBZC,OAAS,WACPC,IAAMC,KAAK,UAAW,CACpBC,MAAO,mBACPC,SAAU,SACTC,KAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAIG,WAEjCC,YAAc,WAEZT,IAAMU,IAAI,+BAAiCC,aAAaC,QAAQ,cAAcR,KAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAIG,WAE5GK,MAAQ,WACNb,IAAMC,KAAK,SAAU,CACnBC,MAAO,mBACPC,SAAU,SACTC,KAAK,SAAAC,GACNC,QAAQC,IAAIF,EAAIG,KAAKM,OAGrBH,aAAaI,QAAQ,YAAaV,EAAIG,KAAKM,OAC3CE,EAAKC,SAAS,CACZnB,UAAU,0FA5BAa,aAAaC,QAAQ,aAGjCM,KAAKD,SAAS,CAAEnB,UAAU,IAE1BoB,KAAKD,SAAS,CAAEnB,UAAU,qCA6B5B,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,4BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQK,QAASR,KAAKnB,QAAtB,gDACAoB,EAAAC,EAAAC,cAAA,UAAQK,QAASR,KAAKL,OAAtB,uBAEEK,KAAKrB,MAAMC,SAAWqB,EAAAC,EAAAC,cAAA,UAAQK,QAASR,KAAKT,aAAtB,2BAAsEU,EAAAC,EAAAC,cAAA,yCAvDtFM,aCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT/B,KAAK,SAAAmC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,WAK1BtC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBsC,MAAM,SAAAC,GACLxC,QAAQwC,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAqB,OAAMH,GAAN,sBAENzB,EAwCX,SAAiCO,GAE/BsB,MAAMtB,GACH/B,KAAK,SAAAsD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQlD,IAAI,gBAAgBmD,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAM1D,KAAK,SAAAmC,GACjCA,EAAawB,aAAa3D,KAAK,WAC7B0B,OAAOC,SAASiC,aAKpB9B,EAAgBC,KAGnBU,MAAM,WACLvC,QAAQC,IACN,mEAzDA0D,CAAwB9B,GAHxBD,EAAgBC,MC7BxB+B","file":"static/js/main.635bebf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.495d93cc.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    loggedIn: false\n  }\n\n  componentDidMount() {\n    // Here's an example of how to confirm that a user is\n    // still logged in after a refresh. This doesn't\n    // have to go only here. You can abstract this to a\n    // utility, too! This can be called from\n    // different pages...this is an example to be EXTENDED.\n    const token = localStorage.getItem(\"app-token\");\n\n    if (token) {\n      this.setState({ loggedIn: true });\n    } else {\n      this.setState({ loggedIn: false });\n    }\n  }\n  signup = () => {\n    axios.post(\"/signup\", {\n      email: \"user@example.com\",\n      password: \"test\"\n    }).then(res => console.log(res.data));\n  }\n  requestData = () => {\n    // check the console to see if this worked\n    axios.get(\"/api/sensitive?secret_token=\" + localStorage.getItem(\"app-token\")).then(res => console.log(res.data));\n  }\n  login = () => {\n    axios.post(\"/login\", {\n      email: \"user@example.com\",\n      password: \"test\"\n    }).then(res => {\n      console.log(res.data.token)\n      // here is the token that you'll have to send to get secured\n      // data\n      localStorage.setItem(\"app-token\", res.data.token)\n      this.setState({\n        loggedIn: true\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>App Home Page</h2>\n        </div>\n        <div className=\"App-intro\">\n          <button onClick={this.signup}>Click here to signup (user@example.com/test)</button>\n          <button onClick={this.login}>Click here to login</button>\n          {\n            this.state.loggedIn ? <button onClick={this.requestData}>Request login only data</button> : <div>Login To Continue</div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}